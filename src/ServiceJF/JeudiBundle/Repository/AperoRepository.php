<?php

namespace ServiceJF\JeudiBundle\Repository;

/**
 * AperoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AperoRepository extends \Doctrine\ORM\EntityRepository
{
    public function findNext()
    {
        $qb = $this->createQueryBuilder('a');
        $now = new \DateTime();
        $now->setTime(0, 0, 0);

        return $qb
            ->where('a.date >= :now')
            ->setParameters(array(
                'now' => $now
            ))
            ->andWhere($qb->expr()->orX(
                $qb->expr()->isNull('a.enabled'),
                $qb->expr()->eq('a.enabled', 1)
            ))
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function findLast()
    {
        $now = new \DateTime();
        $now->setTime(0, 0, 0);

        return $this->createQueryBuilder('a')
            ->orderBy('a.date', 'DESC')
            ->where('a.date < :now')
            ->setParameters(array(
                'now' => $now
            ))
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function findNextToConfirm()
    {
        $qb = $this->createQueryBuilder('a');
        $now = new \DateTime();
        $now->setTime(0, 0, 0);
        return $qb
            ->where($qb->expr()->isNull('a.enabled'))
            ->andWhere('a.date >= :now')
            ->setParameters(array(
                'now' => $now
            ))
            ->orderBy('a.date', 'ASC')
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function findNextToEdit()
    {
        $qb = $this->createQueryBuilder('a');
        $now = new \DateTime();
        $now->setTime(0, 0, 0);
        return $qb
            ->where($qb->expr()->eq('a.enabled', 1))
            ->andWhere('a.date >= :now')
            ->setParameters(array(
                'now' => $now
            ))
            ->orderBy('a.date', 'ASC')
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }
}
