<?php

namespace ServiceJF\ChallengeCIBundle\Repository;

use ServiceJF\CoreBundle\Entity\Season;
use ServiceJF\UserBundle\Entity\User;

/**
 * GuestRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GuestRepository extends \Doctrine\ORM\EntityRepository
{
    public function findBySeason(Season $season)
    {
        return $this->createQueryBuilder('g')
            ->where('g.season = :season')
            ->setParameters(array(
                'season' => $season
            ))
            ->orderBy('g.date', 'DESC')
            ->getQuery()
            ->getResult();
    }

    public function getTotalGuests(User $user, Season $season)
    {
        return $this->createQueryBuilder('g')
            ->select('COUNT(g)')
            ->where('g.host = :user')
            ->andWhere('g.season = :season')
            ->setParameters(array(
                'season' => $season,
                'user' => $user
            ))
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function getLivePhoneGuests(User $user, Season $season)
    {

        return $this->createQueryBuilder('g')
            ->select('COUNT(g)')
            ->where('g.host = :user')
            ->andWhere('g.season = :season')
            ->andWhere('g.live = 1')
            ->andWhere('g.studio = 0')
            ->setParameters(array(
                'season' => $season,
                'user' => $user
            ))
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function getLiveStudioGuests(User $user, Season $season)
    {
        return $this->createQueryBuilder('g')
            ->select('COUNT(g)')
            ->where('g.host = :user')
            ->andWhere('g.season = :season')
            ->andWhere('g.live = 1')
            ->andWhere('g.studio = 1')
            ->setParameters(array(
                'season' => $season,
                'user' => $user
            ))
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function getRecordedPhoneGuests(User $user, Season $season)
    {

        return $this->createQueryBuilder('g')
            ->select('COUNT(g)')
            ->where('g.host = :user')
            ->andWhere('g.season = :season')
            ->andWhere('g.live = 0')
            ->andWhere('g.studio = 0')
            ->setParameters(array(
                'season' => $season,
                'user' => $user
            ))
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function getRecordedStudioMandatoryGuests(User $user, Season $season)
    {

        return $this->createQueryBuilder('g')
            ->select('COUNT(g)')
            ->where('g.host = :user')
            ->andWhere('g.season = :season')
            ->andWhere('g.live = 0')
            ->andWhere('g.studio = 1')
            ->andWhere('g.mandatoryRecorded = 1')
            ->setParameters(array(
                'season' => $season,
                'user' => $user
            ))
            ->getQuery()
            ->getSingleScalarResult();

    }

    public function getRecordedStudioNonMandatoryGuests(User $user, Season $season)
    {

        return $this->createQueryBuilder('g')
            ->select('COUNT(g)')
            ->where('g.host = :user')
            ->andWhere('g.season = :season')
            ->andWhere('g.live = 0')
            ->andWhere('g.studio = 1')
            ->andWhere('g.mandatoryRecorded = 0')
            ->setParameters(array(
                'season' => $season,
                'user' => $user
            ))
            ->getQuery()
            ->getSingleScalarResult();

    }

    public function getSetGuests(User $setter, Season $season)
    {
        return $this->createQueryBuilder('g')
            ->select('COUNT(g)')
            ->where('g.setter = :setter')
            ->andWhere('g.season = :season')
            ->setParameters(array(
                'setter' => $setter,
                'season' => $season
            ))
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function getSetLiveStudioGuests(User $setter, Season $season)
    {
        return $this->createQueryBuilder('g')
            ->select('COUNT(g)')
            ->where('g.setter = :setter')
            ->andWhere('g.season = :season')
            ->andWhere('g.studio = 1')
            ->andWhere('g.live = 1')
            ->setParameters(array(
                'setter' => $setter,
                'season' => $season
            ))
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function getAllHosts(Season $season)
    {
        return $this->createQueryBuilder('g')
            ->select('DISTINCT h.id')
            ->innerJoin('g.host', 'h')
            ->where('g.season = :season')
            ->setParameters(array(
                'season' => $season
            ))
            ->getQuery()
            ->getResult();
    }

    public function findBySetter(User $setter, Season $season)
    {
        return $this->createQueryBuilder('g')
            ->where('g.setter = :setter')
            ->andWhere('g.season = :season')
            ->setParameters(array(
                'setter' => $setter,
                'season' => $season
            ))
            ->orderBy('g.date', 'DESC')
            ->getQuery()
            ->getResult();
    }

    public function findByHost(User $host, Season $season)
    {
        return $this->createQueryBuilder('g')
            ->where('g.host = :host')
            ->andWhere('g.season = :season')
            ->setParameters(array(
                'host' => $host,
                'season' => $season
            ))
            ->orderBy('g.date', 'DESC')
            ->getQuery()
            ->getResult();
    }

    public function getLastGuest(Season $season)
    {
        return $this->createQueryBuilder('g')
            ->where('g.season = :season')
            ->setParameters(array(
                'season' => $season
            ))
            ->orderBy('g.date', 'DESC')
            ->setFirstResult(0)
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }
}
