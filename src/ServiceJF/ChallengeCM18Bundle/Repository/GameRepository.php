<?php

namespace ServiceJF\ChallengeCM18Bundle\Repository;

use Doctrine\ORM\QueryBuilder;
use ServiceJF\ChallengeCM18Bundle\Entity\GamePhase;

/**
 * GameRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GameRepository extends \Doctrine\ORM\EntityRepository
{
    public function findNonFilledGames()
    {
        $qb = $this->createQueryBuilder('g');
        return $qb
            ->where('g.date < :now')
            ->andWhere($qb->expr()->isNull('g.winner'))
            ->setParameters(array(
                'now' => new \DateTime()
            ))
            ->orderBy('g.date', 'ASC')
            ->getQuery()
            ->getResult();
    }

    public function findPlayedGames()
    {
        return $this->createQueryBuilder('g')
            ->where('g.date < :now')
            ->setParameters(array(
                'now' => new \DateTime()
            ))
            ->orderBy('g.date', 'DESC')
            ->getQuery()
            ->getResult();
    }

    public function findToBePlayedGames()
    {
        return $this->createQueryBuilder('g')
            ->where('g.date > :now')
            ->setParameters(array(
                'now' => new \DateTime()
            ))
            ->orderBy('g.date', 'ASC')
            ->getQuery()
            ->getResult();
    }

    public function getCompetitionBegin()
    {
        $qb = $this->createQueryBuilder('g');
        return $qb
            ->where('g.date < :now')
            ->andWhere($qb->expr()->isNotNull('g.winner'))
            ->setParameters(array(
                'now' => new \DateTime()
            ))
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function findKnockoutGames(GamePhase $gamePhase)
    {
        return $this->createQueryBuilder('g')
            ->where('g.gamePhase = :gamePhase')
            ->setParameters(array(
                'gamePhase' => $gamePhase
            ))
            ->orderBy('g.date', 'ASC')
            ->getQuery()
            ->getResult();
    }
}
